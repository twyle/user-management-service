name: Feature Development Build

on:
  push:
    branches-ignore: [development, staging, production, release]
  workflow_dispatch:

jobs:

  # Build:

  #   runs-on: ubuntu-latest

  #   environment:
  #     name: Test

  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: ${{secrets.POSTGRES_USER}}
  #         POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  #         POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
  #         POSTGRES_DB: ${{secrets.POSTGRES_DB}}
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   strategy:
  #     matrix:
  #       python-version: ["3.7", "3.8", "3.9", "3.10"]

  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v2

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  #   # - name: Run the flake8 linter
  #   #   run: flake8

  #   # - name: Run the pylint linter
  #   #   run: pylint --rcfile=.pylintrc ./services/web/api/

  #   # - name: Run the mypy linter
  #   #   run: mypy -p api

  #   - name: Create the Test Environment variables
  #     run: |
  #       touch .env
  #       echo FLASK_DEBUG=${{secrets.FLASK_APP}} >> .env
  #       echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
  #       echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
  #       echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env

  #       echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
  #       echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
  #       echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
  #       echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
  #       echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

  #       echo MAIL_SERVER=${{secrets.MAIL_HOST}} >> .env
  #       echo MAIL_PORT=${{secrets.MAIL_PORT}} >> .env
  #       echo MAIL_USERNAME=${{secrets.MAIL_USERNAME}} >> .env
  #       echo MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}} >> .env
  #       echo MAIL_USE_SSL=${{secrets.MAIL_USE_SSL}} >> .env
  #       echo MAIL_DEFAULT_SENDER=${{secrets.MAIL_DEFAULT_SENDER}} >> .env

  #       echo AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} >> .env
  #       echo AWS_ACCESS_SECRET=${{secrets.AWS_ACCESS_SECRET}} >> .env
  #       echo S3_BUCKET=${{secrets.S3_BUCKET}} >> .env

  #   # - name: Create the test tables
  #   #   run: |
  #   #     python manage.py create_db

  #   - name: Test with pytest
  #     run: |
  #       if [ -d tests ] || [ -d test ]; then python -m pytest --disable-pytest-warnings; fi

  #   # - name: Pytest Coverage
  #   #   run: |
  #   #     if [ -d tests ] || [ -d test ]; then coverage run -m pytest; fi
  #   #     if [ -d tests ] || [ -d test ]; then coverage report -m; fi

  #   # - name: Coverage Report
  #   #   run: coverage xml

  Test-Local:

    runs-on: ubuntu-latest

    environment:
      name: Development

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # needs: [Build]

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create the Development Environment variables
      run: |
        touch .env
        echo FLASK_DEBUG=${{secrets.FLASK_APP}} >> .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env

        echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

        echo MAIL_SERVER=${{secrets.MAIL_HOST}} >> .env
        echo MAIL_PORT=${{secrets.MAIL_PORT}} >> .env
        echo MAIL_USERNAME=${{secrets.MAIL_USERNAME}} >> .env
        echo MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}} >> .env
        echo MAIL_USE_SSL=${{secrets.MAIL_USE_SSL}} >> .env
        echo MAIL_DEFAULT_SENDER=${{secrets.MAIL_DEFAULT_SENDER}} >> .env

        echo AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}} >> .env
        echo AWS_ACCESS_SECRET=${{secrets.AWS_ACCESS_SECRET}} >> .env
        echo S3_BUCKET=${{secrets.S3_BUCKET}} >> .env

    - name: Create the development tables
      run: |
        python manage.py create_db

    - name: Test application
      run: |
        python manage.py seed_db
        python manage.py run &
        sleep 5
        curl http://127.0.0.1:5000/
